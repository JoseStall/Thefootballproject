<p id="notice"><%= notice %></p>
<style>

#map {
  height: 500px;
  width: 100%;
  display: flex;

}


  .item {
    cursor: pointer;

  }


  .marker{
    transform: translate( 50%, calc(-100% - 10px));
    white-space: nowrap;
    font-size: 16px;
    padding: 5px 10px;
    font-weight: bold;
    text-align: center;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0,0,0, 0.3);
    cursor: pointer;

  }
  .marker::after {
  content: ' ';
  position: absolute;
  top: 100%;
  left: 50%;
  width: 0;
  height: 0;
  margin-left: -8px;
  border-left: 8px solid transparent;
  border-right: 8px solid transparent;
  border-top: 8px solid #FFF;
  }

  .marker.is-active {
    background-color: #5069ff;
    z-index: 300;
    color: #FFF;
  }

  .marker.is-active::after {
    border-top-color: #5069ff;
  }
</style>
  <div id="map"></div>
 



<section class="slice sct-color-1" id="scrollToSection">
  <div class="container">
    <div class="section-title section-title--style-1 text-center mb-1">
      <h3 class="section-title-inner heading-sm strong-600 text-uppercase">
        <span>Les bars</span>
      </h3>
      <span class="section-title-delimiter clearfix d-none"></span>
    </div>

    <span class="clearfix"></span>

    <div class="fluid-paragraph fluid-paragraph-sm c-gray-light strong-300 text-center">
      Ces bars diffuseront des matchs. Renseignez vous sur leur équipement, la capacité, ou encore le prix de la pinte !
    </div>

    <span class="space-xs-lg"></span>

    <div class="row-wrapper">
      <div class="row cols-md-space">
        <% @bars.each do |bar| %>

        <div class="col-lg-3 col-md-6 col-sm-12 col-12">
          <div class="item block block--style-3"  data-lat='<%= bar.latitude %>' data-lng='<%= bar.longitude %>' data-nom= '<%= bar.name %>'>
            <div class="block-image relative">
              <div class="view view-first">
                <a href="#">
                  <img src="<%= image_path 'prv/real-estate/img-1.jpg' %>" width="300" height="190" class="img-responsive">
                </a>
              </div>

              <span class="block-price-over bg-base-4"><%= bar.name %> </span>

            </div>

            <div class="block-body text-center mt-1">
              <h3 class="heading heading-5 strong-400 text-normal mb-1">
                <strong>1.5 km</strong>
                <span class="heading-6">de vous</span>
              </h3>
              <span class="star-rating">
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
                <i class="fa fa-star-o"></i>
                <i class="fa fa-star-o"></i>
              </span>
              <span class="clearfix"></span>
            </div>

            <div class="aux-info-wrapper border-top">
              <ul class="aux-info">
                <li class="heading strong-400 text-center">
               <i class="fa fa-beer"> </i><%= bar.pint_price %> €
              </li>
              <li class="heading strong-400 text-center">
                <%= bar.capacity %> personnes
              </li>
              <li class="heading strong-400 text-center">
               <%= bar.screen %>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <% end %>
  </div>
</div>
</div>
</section>



<h1>Bars</h1>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>Installation</th>
      <th>Adresse</th>
      <th>Capacity</th>
      <th>Interested people</th>
      <th>Pint price</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @bars.each do |bar| %>
    <tr>
      <td><%= bar.name %></td>
      <td><%= bar.description %></td>
      <td><%= bar.screen %></td>
      <td><%= bar.address %></td>
      <td><%= bar.capacity %></td>
      <td><%= bar.interested_people %></td>
      <td><%= bar.pint_price %></td>
      <td><%= link_to 'Show', bar %></td>
      <td><%= link_to 'Edit', edit_bar_path(bar) %></td>
      <td><%= link_to 'Destroy', bar, method: :delete, data: { confirm: 'Are you sure?' } %></td>
    </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Bar', new_bar_path %>


<script>
let $map = document.querySelector('#map')


class GoogleMap {

  constructor () {
    this.map = null
    this.bounds = null
    this.TextMarker = null
  }

  async load (element) {
    return new Promise((resolve, reject) => {

      $script("https://maps.googleapis.com/maps/api/js?key=AIzaSyDZ-esJU3-9I9o8Oq6LdVZiN6CHX1J_MbU", () => {
        this.textMarker = class TextMarker extends google.maps.OverlayView {

          constructor (pos, map, text) {
            super()
            this.div = null
            this.html = null
            this.pos = pos
            this.text = text
            this.setMap(map)
            this.onActivation = []
          }

          onAdd () {
            this.div = document.createElement('div')
            this.div.classList.add('marker')
            this.div.style.position = 'absolute'
            this.div.innerHTML = this.text
            this.getPanes().overlayImage.appendChild(this.div)
            this.div.addEventListener('click', (e) => {
              e.preventDefault()
              e.stopPropagation()
              this.activate()
              
            })
          }

          draw () {
            let position = this.getProjection().fromLatLngToDivPixel(this.pos)
            this.div.style.left = position.x + "px"
            this.div.style.top = position.y + "px"
          }

          onRemove () {
            this.div.parentNode.removeChild(this.div)
          }

          hover () {
            if (this.div !== null) {
              this.div.classList.add('is-active')
            }
          }

          out () {
            if (this.div !== null) {

              this.div.classList.remove('is-active')
            }
          }

          activate () {
            if (this.div !== null) {
              this.div.innerHTML = this.html
            }
            this.onActivation.forEach(function (cb) { cb() } )

          }

          deactivate () {
            if (this.div !== null) {
              this.div.innerHTML = this.text
            }

          }

          setContent (html) {
            this.html = html
          }

        }
        this.map = new google.maps.Map(element) 
        this.bounds = new google.maps.LatLngBounds()
        resolve ()
      })
      
    })
  }
  addMarker (lat, lng, text) {
    let point = new google.maps.LatLng(lat, lng)
    let marker = new this.textMarker(point, this.map, text)
    marker.onActivation.push( () => {
      this.map.setCenter(marker.pos)
    })
    this.bounds.extend(point)
    return marker

  }
  centerMap () {
    this.map.panToBounds(this.bounds)
    this.map.fitBounds(this.bounds)

  }

}

const initMap = async function () {
  let map = new GoogleMap()
  let activeMarker = null
  let enabledMarker = null
  await map.load($map)
  Array.from(document.querySelectorAll('.item')).forEach(function (item) {
    let marker = map.addMarker(item.dataset.lat, item.dataset.lng, item.dataset.nom)
    marker.setContent(item.innerHTML)
    marker.onActivation.push(function () {
      if (enabledMarker !== null) {
        enabledMarker.deactivate()
      }
      enabledMarker = marker
    })
    item.addEventListener('mouseover', function (){
      marker.hover()
      if (activeMarker !== null) {
        activeMarker.out()
      }
      activeMarker = marker
    })
    item.addEventListener('mouseleave', function (){
      if (activeMarker === marker) {
        marker.out()
        activeMarker = null
      }
    })

  })
  map.centerMap()
}

if ($map !== null) {
  initMap()
} </script>


